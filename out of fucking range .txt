for i := 0; i < len(table)-1; i++ {
	
			else if string(table[i][len(table[i])-1]) == "'" && string(table[i+1][len(table[i+1])-1]) == "'" {
			   if len(table[i])-1 == 1 {
				   table[i] = ""
			   } else {
				   table[i] = table[i][:len(table[i])-1]
			   }
			   table[i+1] = "'" + table[i+1]
		
		   }
		
	}


	bro  i have this function in golang 
func marks(table []string) []string {
    for i := 0; i < len(table); i++ {
        if i+2 < len(table) {
            if table[i] == "'" && table[i+2] == "'" {
                table[i] = ""
                table[i+2] = ""
                fmt.Println(table[i+1])
                table[i+1] = "'" + table[i+1] + "'"
            } else if table[i][len(table[i])-1] == '\'' && table[i+2][0] == '\'' {
                table[i] = table[i][:len(table[i])-1]
                table[i+2] = table[i+2][1:]
                table[i+1] = "'" + table[i+1] + "'"
            } else if  table[i][len(table[i])-1] == '\''  && table[i+1][0] == '\'' {
                if len(table[i]) == 1 {
                    table[i] = ""
                } else {
                    table[i] = table[i][:len(table[i])-1]
                }
                table[i+1] = "'" + table[i+1][1:]
            }
        }
    }

    result := DeleteCases("", table)
    fmt.Println(result)
    return result
}

and its working for just casses :
(origine text => the result text  ) :
hello ' reda ' =>hello 'reda'
hello' reda ' how are you =>hello 'reda' how are you
but  i want to work with all casses like :
hello ' reda ' how => hello ' reda' how
hello 'reda 'how => hello 'reda' how
hello' reda 'how => hello 'reda' how
hello' reda' =>hello 'reda' how 
...
and all the casses its chould to work you now the logic is if found i couma between a word the word must be between the word without any spaces 

so i think the erroe is because the codiction of i+2 <len(table)
 and i do it because the out of range so please can you give a code like my code withe the same logic and working witgh all the casses without any out of range 
